"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1783],{6486:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var i=n(5893),a=n(1151);const o={title:"Creating the main file",sidebar_position:0},r="CREATING THE MAIN FILE",s={id:"Creating Your First ChatBot/creatingMainFile",title:"Creating the main file",description:"*",source:"@site/guide/chatbot/Creating Your First ChatBot/creatingMainFile.md",sourceDirName:"Creating Your First ChatBot",slug:"/Creating Your First ChatBot/creatingMainFile",permalink:"/twitchapi/guide/chatbot/Creating Your First ChatBot/creatingMainFile",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:0,frontMatter:{title:"Creating the main file",sidebar_position:0},sidebar:"defaultSidebar",previous:{title:"Enviroment Variables",permalink:"/twitchapi/guide/chatbot/Getting Started/enviromentVariables"},next:{title:"Creating your first command",permalink:"/twitchapi/guide/chatbot/Creating Your First ChatBot/creatingFirstCommand"}},c={},h=[{value:"Creating the main file",id:"creating-the-main-file-1",level:2},{value:"Running your ChatBot",id:"running-your-chatbot",level:2}];function l(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"creating-the-main-file",children:"CREATING THE MAIN FILE"}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"creating-the-main-file-1",children:"Creating the main file"}),"\n",(0,i.jsx)(t.p,{children:"After having generated the user access token for your chatbot you are ready to start creating your first chatbot."}),"\n",(0,i.jsxs)(t.p,{children:["The first step you have to make is creating the main file of your project. We are going to call this file ",(0,i.jsx)(t.code,{children:"index.js"}),"."]}),"\n",(0,i.jsxs)(t.admonition,{type:"tip",children:[(0,i.jsx)(t.p,{children:"You can create a your main file within the command line executing this command."}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"touch index.js\n"})})]}),"\n",(0,i.jsx)(t.p,{children:"This is the base code to create a simple chatbot. You have to paste it in your main file."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",children:'\r\n    const { ChatBot, Events } = require("@twitchapi/chatbot") //Import ChatBot class and EventNames enum from the package.\r\n\r\n    const chatbot = new ChatBot({ capabilities: { membership: true, commands: true, tags: true }, clientID: process.env.CLIENTID, channels: ["mychannel"], oauth: process.env.TOKEN, nick: "<The ChatBot\'s nick goes here>" }) \r\n\r\n    chatbot.on(Events.Ready, () => { //This is the event Ready. Is fired when the chatbot could estabilish a valid connection with the Twitch Server.\r\n        console.log(`Welcome ${chatbot.user.login} to the ChatBot!`)\r\n    })\r\n\r\n    chatbot.login() //Used to login and estabilish a connection with the Twitch IRC Server.\r\n\n'})}),"\n",(0,i.jsx)(t.admonition,{type:"warning",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"capabilities"})," option at creating a new instance of a chatbot represents the Twitch capabilities sent to the server at estabilishing the connection. There are three capabilities. ",(0,i.jsx)(t.code,{children:"membership"})," capability is used to receive data when a user joins or leaves a channel (currently not supported by the package). ",(0,i.jsx)(t.code,{children:"commands"})," capability is used to be able to send messages to a chatroom and receive all kinds of events from Twitch IRC Server. ",(0,i.jsx)(t.code,{children:"tags"})," capability is used to receive important information like a user badges when sending a message etc... This capability can only be required by requiring not only it but also commands capability."]})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"channels"})," option at creating an new instance of a chatbot is an array of string. Each strings represents a channel name. The chatbot will join to each channel in the array when the connection is established."]})}),"\n",(0,i.jsx)(t.h2,{id:"running-your-chatbot",children:"Running your ChatBot"}),"\n",(0,i.jsxs)(t.p,{children:["When you finish setting up your main file you can run it by using ",(0,i.jsx)(t.code,{children:"node index.js"})," command in the command line."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"node index.js\n"})}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:["You can set the ",(0,i.jsx)(t.code,{children:"main"})," field in the ",(0,i.jsx)(t.code,{children:"package.json"})," to index.js. Having done this permits you to execute only ",(0,i.jsx)(t.code,{children:"node ."})," command to run the file."]})}),"\n",(0,i.jsx)(t.p,{children:"Having executed the command, if the code was done right, a message has to be logged in the console which should be like this"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-plain",children:"Welcome ChatBotUser to the ChatBot!\n"})})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>s,a:()=>r});var i=n(7294);const a={},o=i.createContext(a);function r(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);