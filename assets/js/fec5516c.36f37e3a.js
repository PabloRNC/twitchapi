"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2832],{556:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var a=t(5893),r=t(1151);const o={title:"Command Handling",sidebar_position:2},i="COMMAND HANDLING",s={id:"Creating Your First ChatBot/commandHandling",title:"Command Handling",description:"*",source:"@site/guide/chatbot/Creating Your First ChatBot/commandHandling.md",sourceDirName:"Creating Your First ChatBot",slug:"/Creating Your First ChatBot/commandHandling",permalink:"/twitchapi/guide/chatbot/Creating Your First ChatBot/commandHandling",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Command Handling",sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Creating your first command",permalink:"/twitchapi/guide/chatbot/Creating Your First ChatBot/creatingFirstCommand"}},c={},d=[];function m(e){const n={admonition:"admonition",code:"code",h1:"h1",hr:"hr",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"command-handling",children:"COMMAND HANDLING"}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["After having created your first commands you would see that the main file has a lot of code and doesn't look clean enough. So here we are to show you an easy way to separate your commands into diffrent files and execute them without a lot code in the ",(0,a.jsx)(n.code,{children:"PRIVMSG"})," event."]}),"\n",(0,a.jsxs)(n.p,{children:["First we have to set where the command files will be placed. So we have created a directory named ",(0,a.jsx)(n.code,{children:"commands"})," in the root of the project."]}),"\n",(0,a.jsxs)(n.admonition,{type:"tip",children:[(0,a.jsx)(n.p,{children:"To create a directory within the command line execute this command"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"mkdir commands\n"})})]}),"\n",(0,a.jsxs)(n.p,{children:["After having created the directory we have to browse for the files in that directory. We are going to do that with ",(0,a.jsx)(n.code,{children:"node:fs"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"\r\nconst { readdirSync } = require('node:fs') //we are importing readdirSync function from node:fs.\r\n\r\nconst commands = new Map() //we create a new constant called command and we asign to it an empty map.\r\n\r\nconst commandFiles = readdirSync('commands').filter((file) => file.endsWith('.js')) //we are browsering all the JavaScript files from commands directory.\r\n\r\nfor(const command of commandFiles){\r\n\r\n    const data = require(`./commands/${command}`)\r\n\r\n    commands.set(command.name, command)\r\n\r\n} //we are doing a loop that is executed for each file in commands directory and adding the command data into the map.\r\n\n"})}),"\n",(0,a.jsx)(n.p,{children:"Now that we have got all the command data its time to identify each command when a message is sent."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"\r\nchatbot.on(Event.PrivMsg, async(message) => {\r\n\r\n    const prefix = process.env.PREFIX //we have created a enviroment variable for the chatbot prefix.\r\n\r\n    if(!message.content.startWith(prefix)) return;\r\n\r\n    const args = message.content.slice(prefix).trim().split(/ +/) //divide the other part of the message which doesn't includes the command into an array of strings.\r\n\r\n    const commandName = args.shift()\r\n\r\n    const command = commands.get(commandName)\r\n\r\n    if(!command) return; //if there isn't any command associated with the commandName extracted from the message, it won't be executed.\r\n\r\n    await command.execute(chatbot, message, args); //execute the command.\r\n})\r\n\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Now that we have finished the command handler we are going to adapt the ",(0,a.jsx)(n.code,{children:"dice"})," command into the handler."]}),"\n",(0,a.jsxs)(n.p,{children:["We are going to create ",(0,a.jsx)(n.code,{children:"dice.js"})," file inside ",(0,a.jsx)(n.code,{children:"commands"})," directory."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'\r\nmodule.exports = {\r\n    name: "dice",\r\n    execute: (client, message, args) => {\r\n        return message.reply(`The dice point to the number ${Math.floor(Math.random() * 6)}`)\r\n    }\r\n}\r\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>i});var a=t(7294);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);